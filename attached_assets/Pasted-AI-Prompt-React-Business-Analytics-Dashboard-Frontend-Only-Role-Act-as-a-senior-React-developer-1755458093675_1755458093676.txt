AI Prompt: React Business Analytics Dashboard (Frontend Only)
Role: Act as a senior React developer and UI/UX designer to help me build a standalone frontend dashboard with mock data, focusing on:

1. Core Features
Mock Auth System (UI only):

Login/Signup forms with Formik validation

Forgot password flow (fake OTP dialog)

Profile page with image upload preview (no real backend)

Real-Time Simulation:

Mock WebSocket updates using setInterval

Optimistic UI for CRUD operations (local state only)

Advanced Charts:

Recharts/Chart.js with dynamic filters

Animated data transitions

2. UI/UX Requirements
Color System:

js
const colors = {
  primary: "#6366f1", // Indigo
  secondary: "#10b981", // Emerald
  darkBg: "#1e293b",
  lightText: "#f8fafc"
}
Animations:

Framer Motion for:

Page transitions (<AnimatePresence>)

Chart loading (staggered bars)

Hover effects (whileHover={{ scale: 1.05 }})

Layout:

<Grid> system for responsive cards

Skeleton loaders for "API" calls

3. Tech Stack
Purpose	Technology
Framework	React + TypeScript
Charts	Recharts
Animations	Framer Motion
Styling	Tailwind CSS
Mock Auth	React Context + LocalStorage
Fake API Calls	setTimeout promises
4. Step-by-Step Request
Phase 1: Setup

Provide a create-react-app template with:

bash
/src
  /components
    /Auth  # Login/Signup forms
    /Dashboard  # Charts/KPI cards
  /contexts  # Mock auth context
  /data  # mockData.json
Phase 2: Key Components

Auth Flow:

jsx
// Mock login
const handleLogin = () => {
  localStorage.setItem("token", "fake_jwt");
  navigate("/dashboard");
}
Profile Image Upload:

jsx
const [preview, setPreview] = useState("");
const handleUpload = (e) => setPreview(URL.createObjectURL(e.target.files[0]));
Phase 3: Charts & Real-Time Simulation

Mock WebSocket:

js
useEffect(() => {
  const interval = setInterval(() => {
    setSales(prev => [...prev, generateRandomSale()]);
  }, 3000);
  return () => clearInterval(interval);
}, []);
Animated Chart:

jsx
<LineChart data={sales}>
  <Line 
    type="monotone" 
    animationDuration={2000}
    dataKey="revenue" 
  />
</LineChart>